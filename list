#include "shell1.h"

alias_t *add_alias_end(alias_t **head, char *name, char *value);
void free_alias_list(alias_t *head);
list_t *add_node_end(list_t **head, char *dir);
void free_list(list_t *head);

/**
 * add_alias_end - Adds a node to the end of a alias_t linked list.
 * @head: A pointer to the head of the list_t list.
 * @name: The name of the new alias to be added.
 * @value: The value of the new alias to be added.
 *
 * Return: If an error occurs - NULL.
 *         Otherwise - a pointer to the new node.
 */
alias_t *add_alias_end(alias_t **head, char *name, char *value)
{
    alias_t *new_node = malloc(sizeof(alias_t));
    alias_t *temp = *head;

    if (!new_node)
        return NULL;

    new_node->name = strdup(name);
    new_node->value = strdup(value);
    new_node->next = NULL;

    if (*head == NULL)
        *head = new_node;
    else
    {
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = new_node;
    }

    return new_node;
}
/**
 * add_node_end - Adds a node to the end of a list_t linked list.
 * @head: A pointer to the head of the list_t list.
 * @dir: The directory path for the new node to contain.
 *
 * Return: If an error occurs - NULL.
 *         Otherwise - a pointer to the new node.
 */
list_t *add_node_end(list_t **head, char *dir)
{
    if (!head)
        return NULL;

    list_t *new_node = malloc(sizeof(list_t));
    list_t *current = *head;

    if (!new_node)
        return NULL;

    new_node->dir = strdup(dir);
    new_node->next = NULL;

    if (!(*head))
    {
        *head = new_node;
        return new_node;
    }

    while (current->next)
        current = current->next;

    current->next = new_node;

    return new_node;
}
/**
 * free_alias_list - Frees a alias_t linked list.
 * @head: THe head of the alias_t list.
 */
void free_alias_list(alias_t *head)
{
    if (head == NULL) {
        return;
    }

    free_alias_list(head->next);
    free(head->name);
    free(head->value);
    free(head);
}
/**
 * free_list - Frees a list_t linked list.
 * @head: The head of the list_t list.
 */
void free_list(list_t *head)
{
	list_t *next;

	while (head)
	{
		next = head->next;
		free(head->dir);
		free(head);
		head = next;
	}
}
